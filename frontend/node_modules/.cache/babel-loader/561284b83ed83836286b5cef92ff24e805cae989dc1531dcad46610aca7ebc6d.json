{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\nconst api = {\n  /**\n   * Get applicants with optional filtering and pagination\n   * @param {URLSearchParams} queryParams - URL query parameters\n   * @returns {Promise} - Promise with applicants data\n   */\n  getApplicants: async queryParams => {\n    try {\n      const response = await axios.get(`${API_URL}/applicants?${queryParams.toString()}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching applicants:', error);\n      throw error;\n    }\n  },\n  /**\n   * Get all unique locations\n   * @returns {Promise} - Promise with locations data\n   */\n  getLocations: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/applicants/locations`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching locations:', error);\n      throw error;\n    }\n  },\n  /**\n   * Get all unique driver's licenses\n   * @returns {Promise} - Promise with driver's licenses data\n   */\n  getDriversLicences: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/applicants/drivers-licences`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching driver\\'s licenses:', error);\n      throw error;\n    }\n  },\n  /**\n   * Contact selected applicants\n   * @param {Array} applicantIds - Array of applicant IDs to contact\n   * @returns {Promise} - Promise with contact result\n   */\n  contactApplicants: async applicantIds => {\n    try {\n      const response = await axios.post(`${API_URL}/applicants/contact`, {\n        applicantIds\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error contacting applicants:', error);\n      throw error;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","getApplicants","queryParams","response","get","toString","data","error","console","getLocations","getDriversLicences","contactApplicants","applicantIds","post"],"sources":["/Users/ayberkakturk/Documents/loadup-talent-pool/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\nconst api = {\n  /**\n   * Get applicants with optional filtering and pagination\n   * @param {URLSearchParams} queryParams - URL query parameters\n   * @returns {Promise} - Promise with applicants data\n   */\n  getApplicants: async (queryParams) => {\n    try {\n      const response = await axios.get(`${API_URL}/applicants?${queryParams.toString()}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching applicants:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Get all unique locations\n   * @returns {Promise} - Promise with locations data\n   */\n  getLocations: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/applicants/locations`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching locations:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Get all unique driver's licenses\n   * @returns {Promise} - Promise with driver's licenses data\n   */\n  getDriversLicences: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/applicants/drivers-licences`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching driver\\'s licenses:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Contact selected applicants\n   * @param {Array} applicantIds - Array of applicant IDs to contact\n   * @returns {Promise} - Promise with contact result\n   */\n  contactApplicants: async (applicantIds) => {\n    try {\n      const response = await axios.post(`${API_URL}/applicants/contact`, { applicantIds });\n      return response.data;\n    } catch (error) {\n      console.error('Error contacting applicants:', error);\n      throw error;\n    }\n  }\n};\n\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAE5E,MAAMC,GAAG,GAAG;EACV;AACF;AACA;AACA;AACA;EACEC,aAAa,EAAE,MAAOC,WAAW,IAAK;IACpC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAAC,GAAGR,OAAO,eAAeM,WAAW,CAACG,QAAQ,CAAC,CAAC,EAAE,CAAC;MACnF,OAAOF,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;AACF;AACA;AACA;EACEE,YAAY,EAAE,MAAAA,CAAA,KAAY;IACxB,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAAC,GAAGR,OAAO,uBAAuB,CAAC;MACnE,OAAOO,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;AACF;AACA;AACA;EACEG,kBAAkB,EAAE,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF,MAAMP,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAAC,GAAGR,OAAO,8BAA8B,CAAC;MAC1E,OAAOO,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC1D,MAAMA,KAAK;IACb;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;EACEI,iBAAiB,EAAE,MAAOC,YAAY,IAAK;IACzC,IAAI;MACF,MAAMT,QAAQ,GAAG,MAAMR,KAAK,CAACkB,IAAI,CAAC,GAAGjB,OAAO,qBAAqB,EAAE;QAAEgB;MAAa,CAAC,CAAC;MACpF,OAAOT,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACb;EACF;AACF,CAAC;AAED,eAAeP,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}