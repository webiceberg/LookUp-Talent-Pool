{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\nconst api = {\n  /**\n   * Get applicants with optional filtering\n   * @param {Object} filters - Filter parameters\n   * @returns {Promise} - Promise with applicants data\n   */\n  getApplicants: async (filters = {}) => {\n    try {\n      const queryParams = new URLSearchParams();\n\n      // Add filters to query params if they exist\n      if (filters.location) queryParams.append('location', filters.location);\n      if (filters.driversLicence) queryParams.append('driversLicence', filters.driversLicence);\n      const response = await axios.get(`${API_URL}/applicants?${queryParams.toString()}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching applicants:', error);\n      throw error;\n    }\n  },\n  /**\n   * Mock contact selected applicants\n   * @param {Array} applicantIds - Array of applicant IDs to contact\n   * @returns {Promise} - Promise with contact result\n   */\n  contactApplicants: async applicantIds => {\n    try {\n      const response = await axios.post(`${API_URL}/applicants/contact`, {\n        applicantIds\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error contacting applicants:', error);\n      throw error;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","getApplicants","filters","queryParams","URLSearchParams","location","append","driversLicence","response","get","toString","data","error","console","contactApplicants","applicantIds","post"],"sources":["/Users/ayberkakturk/Documents/loadup-talent-pool/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\nconst api = {\n  /**\n   * Get applicants with optional filtering\n   * @param {Object} filters - Filter parameters\n   * @returns {Promise} - Promise with applicants data\n   */\n  getApplicants: async (filters = {}) => {\n    try {\n      const queryParams = new URLSearchParams();\n      \n      // Add filters to query params if they exist\n      if (filters.location) queryParams.append('location', filters.location);\n      if (filters.driversLicence) queryParams.append('driversLicence', filters.driversLicence);\n      \n      const response = await axios.get(`${API_URL}/applicants?${queryParams.toString()}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching applicants:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Mock contact selected applicants\n   * @param {Array} applicantIds - Array of applicant IDs to contact\n   * @returns {Promise} - Promise with contact result\n   */\n  contactApplicants: async (applicantIds) => {\n    try {\n      const response = await axios.post(`${API_URL}/applicants/contact`, { applicantIds });\n      return response.data;\n    } catch (error) {\n      console.error('Error contacting applicants:', error);\n      throw error;\n    }\n  }\n};\n\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAE5E,MAAMC,GAAG,GAAG;EACV;AACF;AACA;AACA;AACA;EACEC,aAAa,EAAE,MAAAA,CAAOC,OAAO,GAAG,CAAC,CAAC,KAAK;IACrC,IAAI;MACF,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAAC,CAAC;;MAEzC;MACA,IAAIF,OAAO,CAACG,QAAQ,EAAEF,WAAW,CAACG,MAAM,CAAC,UAAU,EAAEJ,OAAO,CAACG,QAAQ,CAAC;MACtE,IAAIH,OAAO,CAACK,cAAc,EAAEJ,WAAW,CAACG,MAAM,CAAC,gBAAgB,EAAEJ,OAAO,CAACK,cAAc,CAAC;MAExF,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAC,GAAGb,OAAO,eAAeO,WAAW,CAACO,QAAQ,CAAC,CAAC,EAAE,CAAC;MACnF,OAAOF,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;EACEE,iBAAiB,EAAE,MAAOC,YAAY,IAAK;IACzC,IAAI;MACF,MAAMP,QAAQ,GAAG,MAAMb,KAAK,CAACqB,IAAI,CAAC,GAAGpB,OAAO,qBAAqB,EAAE;QAAEmB;MAAa,CAAC,CAAC;MACpF,OAAOP,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACb;EACF;AACF,CAAC;AAED,eAAeZ,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}